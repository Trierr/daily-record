Thymeleaf 介绍
简单说，Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。

特点：
  1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 Thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。
  2.Thymeleaf 开箱即用的特性。它提供标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL表达式效果，避免每天套模板、改 Jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。
  3.Thymeleaf 提供 Spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。

标准表达式语法：
它们分为四类：
  1.变量表达式
  2.选择或星号表达式
  3.文字国际化表达式
  4.URL 表达式

变量表达式：
变量表达式即OGNL表达式或SpringEL表达式，在（在Spring术语中也叫model attributes），例如${person.name}
他们将以HTML标签的一个属性来表示：
<span th:text="${book.author.name}">  
<li th:each="book : ${books}">  

选择(星号)表达式：
选择表达式很像变量表达式，不过他们用一个预先选择的对象来替代上下文变量容器（map）来执行，例如：*{customer.name}
被指定的 object 由 th:object 属性定义：
<div th:object="${book}">  
  ...  
  <span th:text="*{title}">...</span>  
  ...  
</div>

文字国际化表达式
文字国际化表达式允许我们从一个外部文件获取区域文字信息（.properties）用key索引value，还可以提供一组参数（可选）。
#{main.title}  
#{message.entrycreated(${entryId})}
可以在模板文件中找到这样的表达式代码：
<table>  
  ...  
  <th th:text="#{header.address.city}">...</th>  
  <th th:text="#{header.address.country}">...</th>  
  ...  
</table> 

URL 表达式
URL表达式指的是把一个有用的上下文或会话信息添加到URL，这个过程经常被叫做URL重写
@{/order/list}
URL还可以设置参数：
@{/order/details(id=${orderId})}
相对路径：
@{../documents/report}
让我们看这些表达式：
<form th:action="@{/createOrder}">  
<a href="main.html" th:href="@{/main}">


